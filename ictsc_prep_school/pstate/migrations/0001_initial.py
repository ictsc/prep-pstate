# Generated by Django 2.0.4 on 2018-05-02 06:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('score', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, verbose_name='問題名(管理用)')),
                ('display_name', models.CharField(max_length=200, verbose_name='問題名(参加者向け)')),
                ('description', models.TextField(verbose_name='問題文')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='問題公開日時')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='問題公開終了日時')),
                ('is_enabled', models.BooleanField(default=False, verbose_name='公開フラグ')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProblemEnvironment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vnc_server_ipv4_address', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4')),
                ('vnc_server_port', models.CharField(blank=True, max_length=5, null=True)),
                ('vnc_server_username', models.CharField(blank=True, max_length=50, null=True)),
                ('vnc_server_password', models.CharField(blank=True, max_length=50, null=True)),
                ('is_enabled', models.BooleanField(default=False, verbose_name='有効フラグ')),
                ('state', models.CharField(choices=[('IN_PREPARATION', 'IN_PREPARATION'), ('READY', 'READY'), ('IN_PROGRESS', 'IN_PROGRESS'), ('FINISH', 'FINISH'), ('WAITING_FOR_SCORING', 'WAITING_FOR_SCORING'), ('WAITING_FOR_DELETE', 'WAITING_FOR_DELETE'), ('DELETED', 'DELETED')], default='IN_PREPARATION', max_length=100)),
                ('problem', models.ForeignKey(on_delete=False, to='pstate.Problem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Participant',
                'verbose_name_plural': 'Participants',
            },
            bases=('pstate.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('team_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
            },
            bases=('pstate.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='grade',
            name='problem',
            field=models.ForeignKey(on_delete=False, to='pstate.Problem'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='problemenvironment',
            name='participant',
            field=models.ForeignKey(on_delete=False, to='pstate.Participant'),
        ),
        migrations.AddField(
            model_name='problemenvironment',
            name='team',
            field=models.ForeignKey(on_delete=False, to='pstate.Team'),
        ),
        migrations.AddField(
            model_name='participant',
            name='assign_team',
            field=models.ForeignKey(blank=True, help_text='所属するチームを選択してください', null=True, on_delete=False, to='pstate.Team', verbose_name='所属チーム'),
        ),
        migrations.AddField(
            model_name='grade',
            name='participant',
            field=models.ForeignKey(blank=True, null=True, on_delete=False, to='pstate.Participant'),
        ),
        migrations.AddField(
            model_name='grade',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=False, to='pstate.Team'),
        ),
    ]
